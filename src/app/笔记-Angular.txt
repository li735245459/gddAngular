TS 是一种由微软开发编程语言,扩展了JS的语法
  类 Classes
  接口 Interfaces
  模块 Modules
  类型注解 Type annotations
  编译时类型检查 Compile time type checking
  Arrow 函数 (类似 C# 的 Lambda 表达式)
AngularJS 是一款优秀的前端框架,主要考虑的是构建CRUD应用,可以实现前后端分离
AngularJS 不适合用来构建DOM操作很频繁也很复杂的应用像,这种情况用一些更轻量、简单的技术如jQuery可能会更好

配置Angular开发环境:
	1.安装Node.js®,自带安装NPM(随同NodeJS一起安装的包管理工具)
		node -v
		npm -v
	2.安装Git
  	git --version
	3.使用淘宝npm镜像安装Angular-cli:可以创建和管理(测试,构建..)Angular项目
		npm install -g cnpm --registry=https://registry.npm.taobao.org
		cnpm install -g @angular/cli
		ng -v
		--
    If you're using Angular CLI 1.0.0-beta.28 or less, you need to uninstall angular-cli package
      npm uninstall -g angular-cli
      npm uninstall --save-dev angular-cli
    update Angular CLI to a new version
      npm uninstall -g @angular/cli
      npm cache verify # if npm version is < 5 then use `npm cache clean`
      npm install -g @angular/cli@latest
-------------------------------------------------
1、创建Angular项目:
	d: && cd D:\WorkSpace\git && ng new gddAngular2

	项目根目录自带.git文件,配置webStorm中github选项的用户名和密码
	github仓库中新建项目并设置项目下载路劲到webStorm打开项目的Git-Repository-Remotest中

2、下载并安装package.json文件中dependencies下的软件包:
	d: && cd D:\WorkSpace\git\gddAngular2 && npm install(cnpm有bug)

3、启动Angular应用测试是否成功:
	d: && cd D:\WorkSpace\git\gddAngular2 && ng serve --host 0.0.0.0 --port 4200
	-- angular-cli通过代理方式启动:
	npm start
	ng serve --proxy-config proxy.config.json

4、创建全局路由模块: 参考app.module.ts模块文件

5、配置内存 Web API 包模拟数据服务器:
  d: && cd D:\WorkSpace\git\gddAngular2 && cnpm install --save angular-in-memory-web-api@latest
  参考dataSource.ts文件(引入到根模块中)

6、集成第三方模块,项目根目录下执行:
  npm install jquery --save
  npm install bootstrap --save
  npm install font-awesome --save
  npm install ng-easyui --save
  npm install @ng-bootstrap/ng-bootstrap --save
    编辑angular.json文件
    "styles": [
      "src/styles.css",
      "node_modules/bootstrap/dist/css/bootstrap.min.css",
      "node_modules/font-awesome/css/font-awesome.min.css/",
      "node_modules/ng-easyui/themes/material/easyui.css",
      "node_modules/ng-easyui/themes/angular.css",
      "node_modules/ng-easyui/themes/icon.css"
    ],
    "scripts": [
      "node_modules/jquery/dist/jquery.min.js",
      "node_modules/bootstrap/dist/js/bootstrap.min.js"
    ]
    编辑app.module.ts文件
    import {NgbModule} from '@ng-bootstrap/ng-bootstrap';
    import {EasyUIModule} from 'ng-easyui/components/easyui/easyui.module';
    imports: [
      NgbModule.forRoot(),
      EasyUIModule
    ]
  --
  npm install ts-md5 --save
    import {Md5} from "ts-md5";
    Md5.hashStr('12334')

8、创建组件等相关内容:  --flat
  d: && cd D:\WorkSpace\git\gddAngular2
    ng g c component/demo --module=app
    ng g c component/demo/demos --module=app
    ng g s service/demo
    ng g cl model/demo
    --
    ng g d my-new-directive
    ng g p my-new-pipe
    ng g g my-new-guard
    ng g i my-new-interface
    ng g e my-new-enum
    ng g m my-module
    --
    ng test
    ng build --prod

======Angular 是用 HTML 和 TypeScript 构建的web前端应用======
	1)模块(NgModule),至少有一个根模块用于引导应用启动,通常还会有其他功能模块
	2)组件(指令的一种): 至少有一个根组件
		每个组件都会定义一个类,包含应用的数据和逻辑
		组件中的构造函数只做初始化服务操作,持久化操作由ngOnInit负责调用服务来访问数据进行持久化操作

    Angular依赖注入器负责创建服务的实例(不要手动使用new来创建),并把它们注入到指定的组件类的构造函数中,
      这样就分离了服务和调用者的依赖降低了耦合度
  3)指令:
    	内置【结构指令】:
    	  <div *ngIf="heroes.length > 3">{{myHero}}
    			<ul>
    				<li *ngFor="let hero of heroes; let i = index; let odd = odd; let even = even; let first = first; let last = last;" [class.info]="first || last" (click)="selectHero(hero)">
    				  {{i}}--{{ hero }}
    				</li>
    			</ul>
    			<container-element [ngSwitch]="switch_expression">
    			  <some-element *ngSwitchCase="match_expression_1">...</some-element>
    			  <some-element *ngSwitchCase="match_expression_2">...</some-element>
    			  <some-element *ngSwitchDefault>...</some-element>
    			</container-element>
    		</div>
  4)数据绑定: attribute唯一的作用是用来初始化元素和指令的状态。 当进行数据绑定时,只是在与元素和指令的 property 和事件打交道,而 attribute 就完全靠边站了
     布尔值flase、数字0、空字符串""、控制null、未定义undefined、特殊数字NaN都表示假值

    #双向绑定
      <input name="name" [(ngModel)]="usre.name"/>
      --
      <input [ngModel]="user.email" (ngModelChange)="user.email = $event">

    #元素的 property 绑定
      <img [src]="heroImageUrl">
      <div [class]="'p-a-1' + getClass()"></div>
      <div [class.bg-success]="flag > 50"></div>
      <div [style.font-size]="flag > 50 ? '24px' : '12px'"></div>
      <button [attr.aria-label]="help">help</button>
    #组件的 property 绑定
      <app-hero-detail [hero]="currentHero" (deleteRequest)="deleteHero($event)"></app-hero-detail>
        @Input()  hero: Hero;
        @Output() deleteRequest = new EventEmitter<Hero>();
    #指令的 property 绑定
      <div [ngClass]="{'bg-success':flag > 50,'bg-fail':flag < 50}"></div>
      <div [ngStyle]="{'font-style':flag > 50 ? 'italic' : 'normal','font-size':flag > 50 ? '24px' : '12px'}"></div>
    ---
    #元素的事件绑定
      <button (click)="onSave($event.target.value)">Save</button>
    #组件的事件绑定
      <app-hero-detail (deleteRequest)="deleteHero()"></app-hero-detail>
    #指令的事件绑定
      <div (myClick)="clicked=$event">click me</div>
  5)管道:
  	{{item.price | currency:'¥':'code'}}
  	{{"SPORTS STORE" | lowercase}}
  	{{"SPORTS STORE" | uppercase}}
  	{{"SPORTS STORE" | slice:0:4}}
  	{{10 | percent}}
  	{{'some string' | titlecase}} 将文本转换为titlecase
  	{{today（'2018-10-29'） | date:'yyyy-MM-dd HH:mm:ss'}} #2018-05-17 09:54:25
  	{{today | date:'yyyy-MM-dd'}} #2018-05-17
  	{{today | date:'HH:mm:ss'}} #10:04:05
  6)生命周期钩子
    指令与组件共有的钩子
      ngOnChanges 当数据绑定输入属性的值发生变化时调用
      ngOnInit    在第一次 ngOnChanges 后调用
      ngDoCheck   自定义的方法，用于检测和处理值的改变
      ngOnDestroy 指令销毁前调用
    组件特有的钩子
      ngAfterContentInit      组件内容初始化之后调用
      ngAfterContentChecked   组件每次检查内容时调用
      ngAfterViewInit         组件相应的视图初始化之后调用
      ngAfterViewChecked      组件每次检查视图时调用
  7) 组件之间的交互
    通过输入型绑定把数据从父组件传到子组件
    父组件监听子组件的事件
    父组件调用@ViewChild()来创建子组件对象并读取子组件的属性值或调用子组件的方法
  8) 动态组件
  9) 动画
    Angular 的动画系统赋予了制作各种动画效果的能力，以构建出与原生 CSS 动画性能相同的动画
  10) 表单:
    a.模版驱动表单及验证: 异步
      委托指令在模板创建表单控件,字段越来越多表单难以维护
      <input type="text" name="email" ngModel>: ngModel 会将 <input> 注册成表单的子控件，这个子控件的名字就是 email
    b.模型驱动表单及验证: 同步
      在组件中通过代码的形式创建表单控件

======RxJS库======
使用Observable可观察对象进行响应式编程(面向数据流和变更传播的异步编程)的库
Observable可观察对象用于在发布者和订阅者之间传递消息
从Observable可观察对象中获取消息需要调用它的subscribe订阅函数,该函数会传递一个Observer观察者对象用于处理消息(next,error,complete)
1)创建可观察对象的函数:
  //创建一个可观测的承诺
  import { fromPromise } from 'rxjs';
    const data = fromPromise(fetch('/api/endpoint'));
  //创建一个可观测的计数器
  import { interval } from 'rxjs';
    const secondsCounter = interval(1000);
  //创建一个可观察到的事件
  import { fromEvent } from 'rxjs';
    const mouseMoves = fromEvent(document.getElementById('my-element'), 'mousemove');
  //创建一个可观测的,创造了一个AJAX请求
  import { ajax } from 'rxjs/ajax';
    const apiData = ajax('/api/data');
  //构造函数
2)使用管道来把操作符链接起来:
    import { filter, map, tap, retry } from 'rxjs/operators';
    const squareOdd = of(1, 2, 3, 4, 5).pipe(
        filter(n => n % 2 !== 0),
        map(n => n * n),
        tap(n => console.log(n)),
        retry(2)
      );
3)angular中的Observable可观察对象:
  事件发送器 EventEmitter
  HttpClient 从 HTTP 方法调用中返回了可观察对象
======HttpClient: 实现HTTP请求,基于浏览器提供的XMLHttpRequest接口======



